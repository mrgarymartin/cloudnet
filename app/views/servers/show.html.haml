- breadcrumb :server, @server
- title "#{@server.name}"

= render partial: 'servers/nav', locals: { server: @server }

%div{data: {"ng-controller" => "ServerIndividualCtrl", "ng-init" => "init(#{@server.id})"}}
  .jg-widget-content{"ng-if" => "server"}
    %header.jg-widget-header.pure-g.clearfix
      %h2.pure-u-1-2{class: "jg-icon icon-cloud"}= "{{ server.name }}"
      %ul.pure-u-1-2.jg-widget-controls
        %li
          %sticky-dropdown{"data-id" => "server-{{ server.id }}"}
            .btn-group{class: 'sticky'}
              %button.btn.btn-default.dropdown-toggle{"data-toggle" => "dropdown", type: "button", "data-target" =>  "#", "ng-class" => "{disabled: disabled(server)}"}
                %span.icon-settings
                %span.icon-arrow-down
              %ul.jg-dropmenu.dropdown-menu.dropdown-menu-right{role: "menu"}
                - unless @server.provisioner_role.blank?
                  %li
                    %a{"ng-show" => "server.state == 'on'", "rel" => "nofollow", "id" => "install-notes-button", "server-id" => @server.id} Install Notes
                %li
                  %a{"href" => "/servers/{{ server.id }}/edit", "ng-show" => "server.state == 'on'", "rel" => "nofollow"} Edit Server
                - if @server.supports_rebuild?
                  %li
                    %a{"href" => "/servers/{{ server.id }}/edit#rebuild_server", "ng-show" => "server.state == 'on'", "rel" => "nofollow"} Rebuild Server
                %li
                  %a{"data-method" => "post", "href" => "/servers/{{ server.id }}/reboot", "ng-show" => "server.state == 'on'", "rel" => "nofollow"} Reboot Server
                %li
                  %a{"data-method" => "post", "href" => "/servers/{{ server.id }}/shut_down", "ng-show" => "server.state == 'on'", "rel" => "nofollow"} Shut Down Server
                %li
                  %a{"data-method" => "post", "href" => "/servers/{{ server.id }}/start_up", "ng-show" => "server.state == 'off'", "rel" => "nofollow"} Start Up Server
                %li
                  %a{"href" => "/servers/{{ server.id }}/console", "ng-show" => "server.state == 'on'", "rel" => "nofollow"} Server Console
                - if @server.supports_root_password_reset?
                  %li
                    %a{"data-target" => "#reset-password", "data-toggle" => "modal", "ng-show" => "server.state == 'on'", "rel" => "nofollow"} Reset root Password
                - if @server.supports_multiple_ips?
                  %li
                    %a{"data-target" => "#rebuild-network", "data-toggle" => "modal", "ng-show" => "server.state == 'on'", "rel" => "nofollow"} Rebuild Network
                %li
                  %a{"data-target" => "#destroy-server", "data-toggle" => "modal", "rel" => "nofollow"} Destroy Server
          %li
            %span{class: "tags {{ server.state }}"}= "{{ server.state | actionTitleize }}"

    .jg-widget-body
      .server-details.pure-g
        %div{class: "os x64 os-{{server.template.os_distro}} pure-u-1-8"}

        %ul.server-info.pure-u-7-8.pure-u-md-5-8
          %li.pure-u-1-2= "{{ server.template.name }}"
          %li.pure-u-1-2.country
            %img{"ng-src" => '/assets/images/flags/flat/24/{{ server.location.country }}.png'}
            = "{{ server.location.city }},  {{ server.location.country_name }}"
          %li.pure-u-1-2.hostname= "{{ server.hostname }}"
          %li.pure-u-1-2
            = "{{ server.location.provider }}" 
            %img{"ng-src" => '/assets/images/ssd_disks.png', "ng-show" => "server.location.ssd_disks == true"}

        .server-location-presence.pure-u-1.pure-u-md-1-4
          #jg-map{"locate-presence" => "{{ server.location }}"}
    .server-additional-info.pure-g
      = render :partial => 'ip_addresses'

      .basic-server-info.pure-u-1.pure-u-md-1-2
        %dl
          %dt.pure-u-1-3 Credentials
          %dd.pure-u-2-3
            %span root  / 
            %a.password{"obfuscate" => "{{ server.root_password }}", data: {"message" => "show password", "timer" => "true", "time-limit" => 12000, "id" => "obs-{{ server.id }}"}} show password
            %a.copy.icon-clipboard{"copy-password" => "a.password[data-copy='true']", data: {"toggle" => "tooltip", "placement" => "top", "title" => "Copied password", "clipboard-text" => "{{ server.root_password }}"}}

        %dl
          %dt.pure-u-1-3 Hourly
          %dd.pure-u-2-3.cost
            %b= server_cost(@server_costs[:hourly], @server_costs[:hourly_with_vat], 8)
            per hour
        %dl
          %dt.pure-u-1-3 Monthly
          %dd.pure-u-2-3.cost
            %b= server_cost(@server_costs[:monthly], @server_costs[:monthly_with_vat])
            per month
        %dl
          %dt.pure-u-1-3 Created On
          %dd.pure-u-2-3
            = "{{ server.created_at | absoluteDate }}"

    .jg-widget-footer
      %ul.resources-footer.pure-g
        %li.pure-u-1-4
          %span.resource-value= "{{ server.cpus }} Cores"
          %span.resource= 'CPU'
        %li.pure-u-1-4
          %span.resource-value= "{{ server.memory }} MB"
          %span.resource= 'Memory'
        %li.pure-u-1-4
          %span.resource-value= "{{ server.disk_size }} GB"
          %span.resource= 'Disk Size'
        %li.pure-u-1-4
          %span.resource-value= "{{ server.bandwidth }} GB"
          %span.resource= 'Inclusive Bandwidth'
          
  = render partial: 'cpu_usage', locals: { cpu_usages: @cpu_usages }
  = render partial: 'network_usage', locals: { network_usages: @network_usages }
  = render partial: 'server_event'

= render partial: 'server_delete_dialog', locals: { server: @server }
= render partial: 'ip_addresses/rebuild_network_popover' if @server.supports_multiple_ips?
= render partial: 'reset_password_popover' if @server.supports_root_password_reset?
= render partial: 'install_notes', locals: { server: @server } unless @server.provisioner_role.blank?

- if flash.notice =~ /successfully created/
  :javascript
    ga('send', 'event', 'Page', 'View', "New Server - Created Server");
- else
  :javascript
    ga('send', 'event', 'Page', 'View', "Server Show Page");
:javascript
  var mapbox_key = "#{KEYS[:mapbox][:token]}";
  var mapboxPublicToken = "#{KEYS[:mapbox][:public_token]}";
