@app.directive "locationWidget", [ 'Packages', 'ServerSearchState', '$filter', '$templateCache', '$location'
(Packages, State, $filter, $templateCache, $location) ->
  templateUrl: "<%= asset_path('templates/server_search/location.html') %>"
  scope: 
    location: '='
  link: (scope, el, attr) ->
    popup = _.template($templateCache.get "indexChartPopup.html")
    
    scope.showMore = ->
      ~location.href.indexOf('more')
    
    scope.noPackageActive = ->
      not Packages.activePackage
    
    scope.totalPricePerHour = ->
      filterCurrency(scope.location?.pricePerHour(State.counts), 5)
      
    scope.totalPricePerMonth = ->
      filterCurrency(scope.location?.pricePerMonth(State.counts), 2)
      
    scope.memoryPerHour = ->
      pricingMessage(scope.location?.fPriceMem())

    scope.diskPerHour = ->
      pricingMessage(scope.location?.fPriceDisk())
      
    scope.cpuPerHour = ->
      pricingMessage(scope.location?.fPriceCpu())
      
    scope.freeBandwidthPerMonth = ->
      scope.location?.freeBandwidth(State.counts) + " GB/month"
      
    scope.provision = ->
      document.location = "/servers/create?#{$.param(State.counts)}&id=#{scope.location.id}"
      
    pricingMessage = (value) ->
      return "Package only" if scope.location?.budgetVps
      filterCurrency(value / 100000) + " /hour"
      
    filterCurrency = (value, precision=6) ->
      $filter('currency')(value, '$', precision)

    scope.prepareGraphs = ->
      uptime = State.currentUptime(scope.location)
      indices = scope.location?.indices
      indexGraph = $(el).find(".cloud-index-graph")[0]
      uptimeGraph = $(el).find(".uptime-chart")[0]
      new helpers.CloudIndexChart(indexGraph, indices, popup).draw() if indices
      new helpers.UptimeChart(uptimeGraph, uptime).draw() if uptime
      
    scope.$watch "location", ->
      scope.prepareGraphs()
]